import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

# Function to detect and return x-coordinate of upper point of yellow line in an image
def detect_yellow_line(image_path):
    # Load an image
    image = cv2.imread(image_path)

    # Convert BGR to RGB (OpenCV uses BGR by default)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Define BGR values for yellow color
    yellow_bgr = (231, 239, 120)

    # Define range of yellow color in BGR
    lower_yellow_bgr = np.array([yellow_bgr[0] - 10, yellow_bgr[1] - 10, yellow_bgr[2] - 10])
    upper_yellow_bgr = np.array([yellow_bgr[0] + 10, yellow_bgr[1] + 10, yellow_bgr[2] + 10])

    # Threshold the image to get only yellow colors in BGR
    mask_bgr = cv2.inRange(image, lower_yellow_bgr, upper_yellow_bgr)

    # Convert image to HSV format
    image_hsv = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2HSV)

    # Define the target RGB color (231, 239, 120)
    target_color = np.uint8([[[231, 239, 120]]])

    # Convert target color to HSV (Hue, Saturation, Value) format
    target_color_hsv = cv2.cvtColor(target_color, cv2.COLOR_RGB2HSV)

    # Define the range of the yellow color in HSV format
    # Hue range is usually [0, 179], Saturation and Value range is [0, 255]
    lower_yellow_hsv = np.array([target_color_hsv[0][0][0] - 10, 100, 100])
    upper_yellow_hsv = np.array([target_color_hsv[0][0][0] + 10, 255, 255])

    # Create masks for yellow color in HSV and BGR
    mask_hsv = cv2.inRange(image_hsv, lower_yellow_hsv, upper_yellow_hsv)

    # Combine masks to get final yellow mask
    final_mask = cv2.bitwise_or(mask_bgr, mask_hsv)

    # Find contours in the combined mask
    contours, _ = cv2.findContours(final_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Initialize variable to store x-coordinate of upper point
    upper_x = None

    # Iterate through contours to find the yellow line
    for contour in contours:
        # You may apply filtering based on contour area or other criteria here
        x, y, w, h = cv2.boundingRect(contour)

        # Calculate x-coordinate of upper point (top-left corner of the bounding rectangle)
        current_upper_x = x

        # Update if this contour's upper point is higher than previous ones
        if upper_x is None or current_upper_x < upper_x:
            upper_x = current_upper_x

    # Return image path and x-coordinate of the upper point
    return image_path, upper_x

# Directory containing multiple images (use raw string literal)
image_dir = r'C:\Users\LAPI\Desktop\images'

# List all image files in the directory
image_files = os.listdir(image_dir)
image_files = [os.path.join(image_dir, img) for img in image_files if img.endswith('.jpg') or img.endswith('.png')]

# List to store results
results = []

# Process each image
for image_path in image_files:
    result = detect_yellow_line(image_path)
    results.append(result)

# Sort results based on x-coordinate (index 1 of tuple)
results_sorted = sorted(results, key=lambda x: x[1])

# Print sorted results
for result in results_sorted:
    print(f"Image: {result[0]}, X-coordinate of upper point of yellow line: {result[1]}")

# Extract x-coordinates and image names for plotting
image_names = [os.path.basename(result[0]) for result in results_sorted]
x_coordinates = [result[1] for result in results_sorted]

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(image_names, x_coordinates, marker='o', linestyle='-', color='b')
plt.title('X-coordinate of Upper Point of Yellow Line vs. Image')
plt.xlabel('Image')
plt.ylabel('X-coordinate of Upper Point')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()

# Save and display the plot
plt.savefig('yellow_line_coordinates_plot.png')  # Save plot as PNG
plt.show()
